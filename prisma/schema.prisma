generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model champions {
  id                                  Int     @id @default(autoincrement())
  name                                String  @default("")
  games_championsTogames_p1ChampionId games[] @relation("championsTogames_p1ChampionId")
  games_championsTogames_p2ChampionId games[] @relation("championsTogames_p2ChampionId")
}

model games {
  id                                      Int        @id @default(autoincrement())
  player1Won                              Boolean
  blueSideWon                             Boolean
  p1CS                                    Int?
  p2CS                                    Int?
  duration                                Int?
  matchId                                 Int?
  p1ChampionId                            Int?
  p2ChampionId                            Int?
  waywinId                                Int?
  matches                                 matches?   @relation(fields: [matchId], references: [id])
  champions_championsTogames_p1ChampionId champions? @relation("championsTogames_p1ChampionId", fields: [p1ChampionId], references: [id])
  champions_championsTogames_p2ChampionId champions? @relation("championsTogames_p2ChampionId", fields: [p2ChampionId], references: [id])
  waywins                                 waywins?   @relation(fields: [waywinId], references: [id])
}

model matchban {
  gameId     Int
  championId Int
  playerId   Int

  @@id([gameId, championId])
}

model matches {
  id                                           Int           @id @default(autoincrement())
  tournamentId                                 Int?
  stageId                                      Int?
  player1Id                                    Int?
  player2Id                                    Int?
  participants_matches_player1IdToparticipants participants? @relation("matches_player1IdToparticipants", fields: [player1Id], references: [id])
  participants_matches_player2IdToparticipants participants? @relation("matches_player2IdToparticipants", fields: [player2Id], references: [id])
  stages                                       stages?       @relation(fields: [stageId], references: [id])
  tournaments                                  tournaments?  @relation(fields: [tournamentId], references: [id])
  games                                        games[]
}

model matchesbans {
  matchId    Int
  championId Int
  playerId   Int

  @@id([matchId, championId])
}

model participants {
  id                                      Int       @id @default(autoincrement())
  name                                    String    @default("")
  rankId                                  Int?
  signUpDate                              DateTime?
  resignationDate                         DateTime?
  ranks                                   ranks?    @relation(fields: [rankId], references: [id])
  matches_matches_player1IdToparticipants matches[] @relation("matches_player1IdToparticipants")
  matches_matches_player2IdToparticipants matches[] @relation("matches_player2IdToparticipants")
}

model ranks {
  id           Int            @id @default(autoincrement())
  name         String         @default("")
  participants participants[]
}

model stages {
  id      Int       @id @default(autoincrement())
  name    String    @default("")
  matches matches[]
}

model tournaments {
  id          Int       @id @default(autoincrement())
  name        String    @default("")
  description String    @default("")
  startDate   DateTime
  endDate     DateTime?
  createdOn   DateTime  @default(now())
  matches     matches[]
}

model waywins {
  id    Int     @id @default(autoincrement())
  name  String  @default("")
  games games[]
}
